//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

namespace _6524
{
    public partial class MathingModel2D
    {
        public HTuple hv_ExpDefaultWinHandle;

        // Procedures 
        // Local procedures 
        public void Creat_Shape_model(HObject ho_Image, HTuple hv_WindowHandle, HTuple hv_Path,
            out HTuple hv_Row11, out HTuple hv_Column11, out HTuple hv_Angle11)
        {




            // Local iconic variables 

            HObject ho_Rectangle, ho_TemplateImage, ho_ModelContours;
            HObject ho_TransContours;

            // Local control variables 

            HTuple hv_Row12 = new HTuple(), hv_Column12 = new HTuple();
            HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
            HTuple hv_ModelID = new HTuple(), hv_ModelRegionArea = new HTuple();
            HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
            HTuple hv_HomMat2D = new HTuple(), hv_Score = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_TemplateImage);
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_TransContours);
            hv_Row11 = new HTuple();
            hv_Column11 = new HTuple();
            hv_Angle11 = new HTuple();
            hv_Row12.Dispose(); hv_Column12.Dispose(); hv_Row2.Dispose(); hv_Column2.Dispose();
            HOperatorSet.DrawRectangle1(hv_ExpDefaultWinHandle, out hv_Row12, out hv_Column12,
                out hv_Row2, out hv_Column2);
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row12, hv_Column12, hv_Row2,
                hv_Column2);
            ho_TemplateImage.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_TemplateImage);


            //Matching 01: Create the shape model
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_ModelID.Dispose();
                HOperatorSet.CreateShapeModel(ho_TemplateImage, 6, (new HTuple(-90)).TupleRad()
                    , (new HTuple(90)).TupleRad(), (new HTuple(0.7295)).TupleRad(), (new HTuple("point_reduction_medium")).TupleConcat(
                    "no_pregeneration"), "use_polarity", ((new HTuple(12)).TupleConcat(18)).TupleConcat(
                    11), 3, out hv_ModelID);
            }
            //
            //Matching 01: Get the model contour for transforming it later into the image
            ho_ModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
            //
            //Matching 01: Get the reference position
            hv_ModelRegionArea.Dispose(); hv_RefRow.Dispose(); hv_RefColumn.Dispose();
            HOperatorSet.AreaCenter(ho_Rectangle, out hv_ModelRegionArea, out hv_RefRow,
                out hv_RefColumn);
            hv_HomMat2D.Dispose();
            HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RefRow, hv_RefColumn, 0, out hv_HomMat2D);
            ho_TransContours.Dispose();
            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, hv_HomMat2D);
            HOperatorSet.WriteShapeModel(hv_ModelID, hv_Path);
            //Matching 01: Display the model contours
            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
            HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
            HOperatorSet.DispObj(ho_TransContours, hv_ExpDefaultWinHandle);



            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Row11.Dispose(); hv_Column11.Dispose(); hv_Angle11.Dispose(); hv_Score.Dispose();
                HOperatorSet.FindShapeModel(ho_TemplateImage, hv_ModelID, (new HTuple(-90)).TupleRad()
                    , (new HTuple(90)).TupleRad(), 0.5, 0, 0.5, "least_squares", (new HTuple(6)).TupleConcat(
                    1), 0.75, out hv_Row11, out hv_Column11, out hv_Angle11, out hv_Score);
            }
            ho_Rectangle.Dispose();
            ho_TemplateImage.Dispose();
            ho_ModelContours.Dispose();
            ho_TransContours.Dispose();

            hv_Row12.Dispose();
            hv_Column12.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_ModelID.Dispose();
            hv_ModelRegionArea.Dispose();
            hv_RefRow.Dispose();
            hv_RefColumn.Dispose();
            hv_HomMat2D.Dispose();
            hv_Score.Dispose();

            return;
        }

        public void Create_Shape_model(HObject ho_Image, out HObject ho_TemplateImage,
            HTuple hv_WindowHandle, HTuple hv_Path, out HTuple hv_Row11, out HTuple hv_Column11,
            out HTuple hv_Angle11)
        {




            // Local iconic variables 

            HObject ho_Rectangle, ho_ModelContours, ho_TransContours;

            // Local control variables 

            HTuple hv_Row12 = new HTuple(), hv_Column12 = new HTuple();
            HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
            HTuple hv_ModelID = new HTuple(), hv_ModelRegionArea = new HTuple();
            HTuple hv_RefRow = new HTuple(), hv_RefColumn = new HTuple();
            HTuple hv_HomMat2D = new HTuple(), hv_Score = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TemplateImage);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_TransContours);
            hv_Row11 = new HTuple();
            hv_Column11 = new HTuple();
            hv_Angle11 = new HTuple();

            hv_Row12.Dispose(); hv_Column12.Dispose(); hv_Row2.Dispose(); hv_Column2.Dispose();
            HOperatorSet.DrawRectangle1(hv_WindowHandle, out hv_Row12, out hv_Column12,
                out hv_Row2, out hv_Column2);
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row12, hv_Column12, hv_Row2,
                hv_Column2);
            ho_TemplateImage.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_TemplateImage);


            //Matching 01: Create the shape model
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_ModelID.Dispose();
                HOperatorSet.CreateShapeModel(ho_TemplateImage, 6, (new HTuple(0)).TupleRad()
                    , (new HTuple(360)).TupleRad(), (new HTuple(0.7295)).TupleRad(), (new HTuple("point_reduction_medium")).TupleConcat(
                    "no_pregeneration"), "use_polarity", ((new HTuple(12)).TupleConcat(18)).TupleConcat(
                    11), 3, out hv_ModelID);
            }
            //
            //Matching 01: Get the model contour for transforming it later into the image
            ho_ModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
            //
            //Matching 01: Get the reference position
            hv_ModelRegionArea.Dispose(); hv_RefRow.Dispose(); hv_RefColumn.Dispose();
            HOperatorSet.AreaCenter(ho_Rectangle, out hv_ModelRegionArea, out hv_RefRow,
                out hv_RefColumn);
            hv_HomMat2D.Dispose();
            HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RefRow, hv_RefColumn, 0, out hv_HomMat2D);
            ho_TransContours.Dispose();
            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, hv_HomMat2D);
            HOperatorSet.WriteShapeModel(hv_ModelID, hv_Path);
            //Matching 01: Display the model contours
            HOperatorSet.DispObj(ho_Image, hv_WindowHandle);
            HOperatorSet.SetColor(hv_WindowHandle, "green");
            HOperatorSet.SetDraw(hv_WindowHandle, "margin");
            HOperatorSet.DispObj(ho_TransContours, hv_WindowHandle);



            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Row11.Dispose(); hv_Column11.Dispose(); hv_Angle11.Dispose(); hv_Score.Dispose();
                HOperatorSet.FindShapeModel(ho_TemplateImage, hv_ModelID, (new HTuple(0)).TupleRad()
                    , (new HTuple(360)).TupleRad(), 0.5, 0, 0.5, "least_squares", (new HTuple(6)).TupleConcat(
                    1), 0.75, out hv_Row11, out hv_Column11, out hv_Angle11, out hv_Score);
            }
            ho_Rectangle.Dispose();
            ho_ModelContours.Dispose();
            ho_TransContours.Dispose();

            hv_Row12.Dispose();
            hv_Column12.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_ModelID.Dispose();
            hv_ModelRegionArea.Dispose();
            hv_RefRow.Dispose();
            hv_RefColumn.Dispose();
            hv_HomMat2D.Dispose();
            hv_Score.Dispose();

            return;
        }

        public void Draw_point(HObject ho_TemplateImage, out HObject ho_Circle1, HTuple hv_WindowHandle,
            out HTuple hv_PointX, out HTuple hv_PointY)
        {



            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Circle1);
            hv_PointX = new HTuple();
            hv_PointY = new HTuple();
            HOperatorSet.ClearWindow(hv_WindowHandle);
            HOperatorSet.DispObj(ho_TemplateImage, hv_WindowHandle);

            hv_PointX.Dispose(); hv_PointY.Dispose();
            HOperatorSet.DrawPoint(hv_WindowHandle, out hv_PointX, out hv_PointY);
            ho_Circle1.Dispose();
            HOperatorSet.GenCircle(out ho_Circle1, hv_PointX, hv_PointY, 5);


            return;
        }

        public void Find_shape_model(HObject ho_Image, HTuple hv_WindowHandle, HTuple hv_Path, HTuple hv_Row11,
            HTuple hv_Column11, HTuple hv_Angle11, HTuple hv_PointX, HTuple hv_PointY, out HTuple hv_I,
            out HTuple hv_RowTrans, out HTuple hv_ColTrans)
        {

            HObject ho_ModelContours, ho_Circle = null, ho_TransContours = null;

            // Local control variables 

            HTuple hv_ModelID1 = new HTuple(), hv_Row = new HTuple();
            HTuple hv_Column = new HTuple(), hv_Angle = new HTuple();
            HTuple hv_Scale = new HTuple(), hv_Score = new HTuple();
            HTuple hv_HomMat2D1 = new HTuple(), hv_HomMat2D = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_Circle);
            HOperatorSet.GenEmptyObj(out ho_TransContours);
            hv_I = new HTuple();
            hv_RowTrans = new HTuple();
            hv_ColTrans = new HTuple();
            try
            {
         
                HOperatorSet.ClearWindow(hv_WindowHandle);
                HOperatorSet.DispObj(ho_Image, hv_WindowHandle);

                hv_ModelID1.Dispose();
                HOperatorSet.ReadShapeModel(hv_Path, out hv_ModelID1);

                //Matching 01: Transform the model contours into the detected positions

                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_Row.Dispose(); hv_Column.Dispose(); hv_Angle.Dispose(); hv_Scale.Dispose(); hv_Score.Dispose();
                    HOperatorSet.FindScaledShapeModel(ho_Image, hv_ModelID1, (new HTuple(0)).TupleRad()
                        , (new HTuple(360)).TupleRad(), 0.9, 1.1, 0.8, 0, 0.5, "least_squares",
                        (new HTuple(6)).TupleConcat(1), 0.75, out hv_Row, out hv_Column, out hv_Angle,
                        out hv_Scale, out hv_Score);
                }
                ho_ModelContours.Dispose();
                HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID1, 1);
                for (hv_I = 0; (int)hv_I <= (int)((new HTuple(hv_Score.TupleLength())) - 1); hv_I = (int)hv_I + 1)
                {

                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        hv_HomMat2D1.Dispose();
                        HOperatorSet.VectorAngleToRigid(hv_Row11, hv_Column11, hv_Angle11, hv_Row.TupleSelect(
                            hv_I), hv_Column.TupleSelect(hv_I), hv_Angle.TupleSelect(hv_I), out hv_HomMat2D1);
                    }
                    hv_RowTrans.Dispose(); hv_ColTrans.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2D1, hv_PointX, hv_PointY, out hv_RowTrans,
                        out hv_ColTrans);

                    ho_Circle.Dispose();
                    HOperatorSet.GenCircle(out ho_Circle, hv_RowTrans, hv_ColTrans, 5);
                    HOperatorSet.SetColor(hv_WindowHandle, "green");
                    HOperatorSet.DispObj(ho_Circle, hv_WindowHandle);
                    hv_HomMat2D.Dispose();
                    HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        HTuple ExpTmpOutVar_0;
                        HOperatorSet.HomMat2dScale(hv_HomMat2D, hv_Scale.TupleSelect(hv_I), hv_Scale.TupleSelect(
                            hv_I), 0, 0, out ExpTmpOutVar_0);
                        hv_HomMat2D.Dispose();
                        hv_HomMat2D = ExpTmpOutVar_0;
                    }
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        HTuple ExpTmpOutVar_0;
                        HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Angle.TupleSelect(hv_I), 0, 0,
                            out ExpTmpOutVar_0);
                        hv_HomMat2D.Dispose();
                        hv_HomMat2D = ExpTmpOutVar_0;
                    }
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        HTuple ExpTmpOutVar_0;
                        HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_Row.TupleSelect(hv_I), hv_Column.TupleSelect(
                            hv_I), out ExpTmpOutVar_0);
                        hv_HomMat2D.Dispose();
                        hv_HomMat2D = ExpTmpOutVar_0;
                    }
                    ho_TransContours.Dispose();
                    HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours,
                        hv_HomMat2D);

                    HOperatorSet.DispObj(ho_TransContours, hv_WindowHandle);

                }
                //
                ho_ModelContours.Dispose();
                ho_Circle.Dispose();
                ho_TransContours.Dispose();

                hv_ModelID1.Dispose();
                hv_Row.Dispose();
                hv_Column.Dispose();
                hv_Angle.Dispose();
                hv_Scale.Dispose();
                hv_Score.Dispose();
                hv_HomMat2D1.Dispose();
                hv_HomMat2D.Dispose();

                return;
            }
            catch (Exception)
            {
                ho_ModelContours.Dispose();
                ho_Circle.Dispose();
                ho_TransContours.Dispose();

                hv_ModelID1.Dispose();
                hv_Row.Dispose();
                hv_Column.Dispose();
                hv_Angle.Dispose();
                hv_Scale.Dispose();
                hv_Score.Dispose();
                hv_HomMat2D1.Dispose();
                hv_HomMat2D.Dispose();

                return;

            }

            // Local iconic variables 

          
        }

        // Main procedure 
        private void action()
        {


            // Local iconic variables 

            HObject ho_Image, ho_TemplateImage, ho_Circle1;

            // Local control variables 

            HTuple hv_WindowHandle = new HTuple(), hv_Path = new HTuple();
            HTuple hv_Row11 = new HTuple(), hv_Column11 = new HTuple();
            HTuple hv_Angle11 = new HTuple(), hv_PointX = new HTuple();
            HTuple hv_PointY = new HTuple(), hv_I = new HTuple(), hv_RowTrans = new HTuple();
            HTuple hv_ColTrans = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_TemplateImage);
            HOperatorSet.GenEmptyObj(out ho_Circle1);
            //
            //Matching 01: ************************************************
            //Matching 01: BEGIN of generated code for model initialization
            //Matching 01: ************************************************
            //dev_close_window(...);
            //dev_open_window(...);
            HOperatorSet.SetSystem("border_shape_models", "false");
            hv_Path.Dispose();
            hv_Path = "C:/Users/Administrator/Desktop/matching1.shm";
            //Matching 01: Obtain the model image
            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, "E:/机械手标定/Pic_2022_03_22_113853551231234123.bmp");
            ho_TemplateImage.Dispose(); hv_Row11.Dispose(); hv_Column11.Dispose(); hv_Angle11.Dispose();
            Create_Shape_model(ho_Image, out ho_TemplateImage, hv_WindowHandle, hv_Path,
                out hv_Row11, out hv_Column11, out hv_Angle11);




            ho_Circle1.Dispose(); hv_PointX.Dispose(); hv_PointY.Dispose();
            Draw_point(ho_TemplateImage, out ho_Circle1, hv_WindowHandle, out hv_PointX,
                out hv_PointY);
            //Matching 01: END of generated code for model initialization
            //Matching 01:  * * * * * * * * * * * * * * * * * * * * * * *
            //Matching 01: BEGIN of generated code for model application
            //Matching 01: The following operations are usually moved into
            //Matching 01: that loop where the acquired images are processed
            //
            //Matching 01: Find the model
            hv_I.Dispose(); hv_RowTrans.Dispose(); hv_ColTrans.Dispose();
            //Find_shape_model(ho_Image, hv_Path, hv_Row11, hv_Column11, hv_Angle11, hv_PointX,
            //    hv_PointY, out hv_I, out hv_RowTrans, out hv_ColTrans);
            //Matching 01: *******************************************
            //Matching 01: END of generated code for model application
            //Matching 01: *******************************************
            //

            ho_Image.Dispose();
            ho_TemplateImage.Dispose();
            ho_Circle1.Dispose();

            hv_WindowHandle.Dispose();
            hv_Path.Dispose();
            hv_Row11.Dispose();
            hv_Column11.Dispose();
            hv_Angle11.Dispose();
            hv_PointX.Dispose();
            hv_PointY.Dispose();
            hv_I.Dispose();
            hv_RowTrans.Dispose();
            hv_ColTrans.Dispose();

        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop
            HOperatorSet.SetSystem("width", 512);
            HOperatorSet.SetSystem("height", 512);
        }

        public void RunHalcon(HTuple Window)
        {
            hv_ExpDefaultWinHandle = Window;
            action();
        }

    }
}


