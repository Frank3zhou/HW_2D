//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

namespace _6524
{
    //
    // File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.0
    // Non-ASCII strings in this file are encoded in UTF-8.
    // 
    // Please note that non-ASCII characters in string constants are exported
    // as octal codes in order to guarantee that the strings are correctly
    // created on all systems, independent on any compiler settings.
    // 
    // Source files with different encoding should not be mixed in one project.
    //
    //  This file is intended to be used with the HDevelopTemplate or
    //  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

    using System;
    using System.Windows.Forms;
    using HalconDotNet;

    public partial class Robotcalibration
    {
        public HTuple hv_ExpDefaultWinHandle;

        public void HDevelopStop()
        {
            MessageBox.Show("Press button to continue", "Program stop");
        }

        // Procedures 
        // Local procedures 
        public void Affine_XY(HTuple hv_Path, HTuple hv_tx, HTuple hv_ty, out HTuple hv_Qx,
            out HTuple hv_Qy)
        {



            // Local control variables 

            HTuple hv_FileHandle = new HTuple(), hv_SerializedItemHandle = new HTuple();
            HTuple hv_HomMat2D_9p = new HTuple();
            // Initialize local and output iconic variables 
            hv_Qx = new HTuple();
            hv_Qy = new HTuple();
            hv_FileHandle.Dispose();
            HOperatorSet.OpenFile(hv_Path, "input_binary", out hv_FileHandle);
            hv_SerializedItemHandle.Dispose();
            HOperatorSet.FreadSerializedItem(hv_FileHandle, out hv_SerializedItemHandle);
            hv_HomMat2D_9p.Dispose();
            HOperatorSet.DeserializeHomMat2d(hv_SerializedItemHandle, out hv_HomMat2D_9p);
            HOperatorSet.CloseFile(hv_FileHandle);
            hv_Qx.Dispose(); hv_Qy.Dispose();
            HOperatorSet.AffineTransPoint2d(hv_HomMat2D_9p, hv_tx, hv_ty, out hv_Qx, out hv_Qy);

            hv_FileHandle.Dispose();
            hv_SerializedItemHandle.Dispose();
            hv_HomMat2D_9p.Dispose();

            return;
        }

        public void Create_calibration(HTuple hv_Bx, HTuple hv_By, HTuple hv_Ax, HTuple hv_Ay,
            HTuple hv_Path)
        {



            // Local control variables 

            HTuple hv_HomMat2D = new HTuple(), hv_SerializedItemHandle = new HTuple();
            HTuple hv_FileHandle = new HTuple();
            // Initialize local and output iconic variables 
            hv_HomMat2D.Dispose();
            HOperatorSet.VectorToHomMat2d(hv_Bx, hv_By, hv_Ax, hv_Ay, out hv_HomMat2D);


            //保存变换矩阵
            hv_SerializedItemHandle.Dispose();
            HOperatorSet.SerializeHomMat2d(hv_HomMat2D, out hv_SerializedItemHandle);
            hv_FileHandle.Dispose();
            HOperatorSet.OpenFile(hv_Path, "output_binary", out hv_FileHandle);
            HOperatorSet.FwriteSerializedItem(hv_FileHandle, hv_SerializedItemHandle);
            HOperatorSet.CloseFile(hv_FileHandle);

            hv_HomMat2D.Dispose();
            hv_SerializedItemHandle.Dispose();
            hv_FileHandle.Dispose();

            return;
        }

        // Main procedure 
        private void action()
        {


            // Local iconic variables 

            HObject ho_Image, ho_Rectangle = null, ho_ImageReduced = null;
            HObject ho_Region = null, ho_ConnectedRegions = null, ho_SelectedRegions = null;
            HObject ho_RegionFillUp = null;

            // Local control variables 

            HTuple hv_WindowHandle = new HTuple(), hv_Path = new HTuple();
            HTuple hv_Ax = new HTuple(), hv_Ay = new HTuple(), hv_Bx = new HTuple();
            HTuple hv_By = new HTuple(), hv_Index = new HTuple(), hv_Row1 = new HTuple();
            HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
            HTuple hv_Column2 = new HTuple(), hv_Area = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_tx = new HTuple(), hv_ty = new HTuple(), hv_Qx = new HTuple();
            HTuple hv_Qy = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            //dev_close_window(...);
            //dev_open_window(...);
            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, "C:/Users/Administrator/Desktop/屏幕截图 2022-03-16 173325.png");
            hv_Path.Dispose();
            hv_Path = "C:/Users/Administrator/Desktop/my_vector.mat";
            //已知A坐标系的9个点
            hv_Ax.Dispose();
            hv_Ax = new HTuple();
            hv_Ay.Dispose();
            hv_Ay = new HTuple();

            //待识别的B坐标点，和上面的A坐标系点一一对应
            hv_Bx.Dispose();
            hv_Bx = new HTuple();
            hv_By.Dispose();
            hv_By = new HTuple();
            for (hv_Index = 1; (int)hv_Index <= 9; hv_Index = (int)hv_Index + 1)
            {
                HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                //以下过程为在B坐标系找A中的9个点
                hv_Row1.Dispose(); hv_Column1.Dispose(); hv_Row2.Dispose(); hv_Column2.Dispose();
                HOperatorSet.DrawRectangle1(hv_ExpDefaultWinHandle, out hv_Row1, out hv_Column1,
                    out hv_Row2, out hv_Column2);
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row1, hv_Column1, hv_Row2,
                    hv_Column2);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
                ho_Region.Dispose();
                HOperatorSet.Threshold(ho_ImageReduced, out ho_Region, 0, 128);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
                    "and", 1000, 999999);

                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                //找到了B坐标系的点(Row,Column)
                hv_Area.Dispose(); hv_Row.Dispose(); hv_Column.Dispose();
                HOperatorSet.AreaCenter(ho_RegionFillUp, out hv_Area, out hv_Row, out hv_Column);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_Bx = hv_Bx.TupleConcat(
                            hv_Column);
                        hv_Bx.Dispose();
                        hv_Bx = ExpTmpLocalVar_Bx;
                    }
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_By = hv_By.TupleConcat(
                            hv_Row);
                        hv_By.Dispose();
                        hv_By = ExpTmpLocalVar_By;
                    }
                }
            }
            //得到目标变换矩阵HomMat2D
            Create_calibration(hv_Bx, hv_By, hv_Ax, hv_Ay, hv_Path);

            HDevelopStop();

            hv_tx.Dispose();
            hv_tx = 0;
            hv_ty.Dispose();
            hv_ty = 0;
            //读取变换矩阵,测试
            hv_Qx.Dispose(); hv_Qy.Dispose();
            Affine_XY(hv_Path, hv_tx, hv_ty, out hv_Qx, out hv_Qy);
            ho_Image.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageReduced.Dispose();
            ho_Region.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionFillUp.Dispose();

            hv_WindowHandle.Dispose();
            hv_Path.Dispose();
            hv_Ax.Dispose();
            hv_Ay.Dispose();
            hv_Bx.Dispose();
            hv_By.Dispose();
            hv_Index.Dispose();
            hv_Row1.Dispose();
            hv_Column1.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_Area.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_tx.Dispose();
            hv_ty.Dispose();
            hv_Qx.Dispose();
            hv_Qy.Dispose();

        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop
            HOperatorSet.SetSystem("width", 512);
            HOperatorSet.SetSystem("height", 512);
        }

        public void RunHalcon(HTuple Window)
        {
            hv_ExpDefaultWinHandle = Window;
            action();
        }

    }


}




